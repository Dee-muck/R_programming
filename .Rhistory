runif(10)
ls
ls()
ls()
rm(list=ls())
?data.frame
?sapply
?interaction
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list<-lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags,class)
cls_vect<-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors<-flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals<-lapply(flags[,nrows],unique)
unique_vals<-lapply(flags[,nrows(flags)],unique)
unique_vals<-lapply(flags,unique)
unique_vals
length(unique_vals)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags,uniwue)
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
log(-1)
printmessage <-function(x){
if(x>0) print ("X is greater than zero")
else print("X is less or equal to zero")
invisible(x)
}
printmessage(12)
printmessage(-12)
?invisible
printmessage2 <-function(x){
if(x>0) print ("X is greater than zero")
else print("X is less or equal to zero")
}
printmessage2(-12)
mean(xzx)
traceback
traceback()
View(flag_colors)
debug(lm)
lm(y~x)
n
exit()
x<-2
library(datasets)
data("iris")
data(iris)
iris
sapply(iris$virginica, mean)
x1<-sapply(iris$virginica, mean)
x1
x1<-sapply(iris$virginica, mean)
?rowMeans
sapply(iris$Sepal.Length, mean)
tapply(Sepal.Length, Species, mean)["virginica"]
tapply(iris$Sepal.Length, iris$Species==virginica, mean)
s<-split(iris, iris$Species)
sapply(s,function(x) colMeans(x[, 2]))
sapply(s,function(x) colMeans(x[, c("Sepal.Length", "Sepal.Width")])
1
sapply(s,function(x) colMeans(x[, c("Sepal.Length", "Sepal.Width")]))
sapply(s,function(x) colMeans(x[, c("Sepal.Length")]))
mean(iris$Sepal.Length [iris$Species=="virginica"],na.rm=TRUE)
?tapply
tapply(iris$Sepal.Length,[iris$Species==virginica], mean)
colmeans(iris)
colMeans(iris)
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
library(datasets)
library(datasets)
data(mtcars)
?mtcars
mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(iris.$, mtcars$cyl, mean)
> tapply(iris$Sepal.Length,iris$Species, mean)
tapply(iris$Sepal.Length,iris$Species, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mean(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$hp, mtcars$cyl, mean)
an3<-82.63636 122.28571 209.21429
an3<-tapply(mtcars$hp, mtcars$cyl, mean)
an[3]-an[1]
an3[3]-an3[1]
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(1:15)
zz<-makeVector(1:15)
zz
class(zz)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(1:15)
cachemean(1:15,2:12,3:17)
zz<-1:15
cachemean(zz[3])
zz<-matrix(1:4,2,2)
zz
cachemean(zz)
cachemean(zz[,1])
zz<-makeVector(1:15)
zz
cachemean(zz)
cachemean(zz)
zzz<-makeVector(1:150)
cachemean(zzz)
cachemean(zzz)
y<-10
f <- function(x) { y<-2
y^2 + g(x)
}
g <- function(x) { x*y
}
f(3)
makeVector$get
makeVector$get()
makeVector(c(1,2,3,4,5))
makeVector$get()
a<-makeVector(c(1,2,3,4,5))
a$get()
makeVector()$get()
makeVector(c(1,2,3))$get()
a<-makeVector(c(1,2,3,4,5))
makeVector()$get()
a$get()
a$set(c(1,3,5,7))
a$get()
?solve
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inverseM <- NULL
set <- function(y) {
x <<- y
inverseM <<- NULL
}
get <- function() x
setInverseM <- function(NewInverseM) inverseM <<- NewInverseM
getInverseM <- function() inverseM
list(set = set, get = get,
setInverseM = setInverseM,
getInverseM = getInverseM)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverseM <- x$getInverseM()
if(!is.null(inverseM)) {
message("getting cached `inverse Matrix")
return(inverseM)
}
data <- x$getInverseM()
inverseM <- solve(data, ...)
x$setInverseM(inverseM)
inverseM
}
matr<-matrix(1:4,2,2)
matr
matr_c<-makeCacheMatrix(matr)
matr_c
matr_c$get()
cacheSolve(matr_c)
cacheSolve(matr_c)
solve(matr)
test1<-matr_c$getInverseM()
test1
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inverseM <- NULL
set <- function(y) {
x <<- y
inverseM <<- NULL
}
get <- function() x
setInverseM <- function(NewInverseM) inverseM <<- NewInverseM
getInverseM <- function() inverseM
list(set = set, get = get,
setInverseM = setInverseM,
getInverseM = getInverseM)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverseM <- x$getInverseM()
if(!is.null(inverseM)) {
message("getting cached `inverse Matrix")
return(inverseM)
}
data <- x$get()
inverseM <- solve(data, ...)
x$setInverseM(inverseM)
inverseM
}
matr<-matrix(1:4,2,2)
matr_c<-makeCacheMatrix(matr)
matr_c
matr_c$get()
cacheSolve(matr_c)
cacheSolve(matr_c)*matr_c$get()
cacheSolve(matr_c)%*%matr_c$get()
cacheSolve(matr_c)
cacheSolve(matr_c*2)
cacheSolve(matr_c%*%2)
matr2<-matrix(c(2,15,34,32,21,17),3,3)
matr2
makeCacheMatrix(matr2)
cacheSolve(matr2)
matr2_c<-makeCacheMatrix(matr2)
cacheSolve(matr2_c)
matr2<-matrix(c(3,15,34,32,21,17),3,3)
matr2_c<-makeCacheMatrix(matr2)
cacheSolve(matr2_c)
matr2<-matrix(c(3,15,34,12,24,17),3,3)
matr2_c<-makeCacheMatrix(matr2)
matr2_c$getInverseM
matr2_c$getInverseM()
cacheSolve(matr2_c)
matr2<-matrix(c(30,5,3,12,24,7),3,3)
cacheSolve(matr2_c)
matr2<-matrix(c(1,1,1,1,1,1),3,3)
matr2
matr2_c<-makeCacheMatrix(matr2)
cacheSolve(matr2_c)
matr2<-matrix(c(1,1,1,1,1,1,8,0,9),3,3)
matr2_c<-makeCacheMatrix(matr2)
cacheSolve(matr2_c)
matr3<-matrix(c(1,1,1,1,1,1,8,0,9,2,3,4,43,2,6,8),4,4)
matr3
matr3_c<-makeCacheMatrix(matr3)
cacheSolve(matr3_c)
matr3_inv<-cacheSolve(matr3_c)
matr3_inv%*%matr3
m4<-matrix(c(1,9,12,65),2,2)
m
m4
m4_c<-makeCacheMatrix(m4)
m4_c
m4_i<-cacheSolve(m4_c)
m4_i
m4%*%m4_i
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inverseM <- NULL
set <- function(y) {
x <<- y
inverseM <<- NULL
}
get <- function() x
setInverseM <- function(NewInverseM) inverseM <<- NewInverseM
getInverseM <- function() inverseM
list(set = set, get = get,
setInverseM = setInverseM,
getInverseM = getInverseM)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverseM <- x$getInverseM()
if(!is.null(inverseM)) {
message("getting cached `inverse Matrix")
return(inverseM)
}
data <- x$get()
inverseM <- solve(data, ...)
x$setInverseM(inverseM)
inverseM
}
m4<-matrix(c(1,9,12,65),2,2)
m4_c<-makeCacheMatrix(m4)
m4_i<-cacheSolve(m4_c)
m4%*%m4_i
length(dim(m4$get())
2
length(dim(m4$get()))
dim(m4)
lenght(dim(m4))
length(dim(m4))
m5<-matrix(c(1,9,12,65,3,5,4,3,2),3,3)
m5_c<-makeCacheMatrix(m5)
m5_c
m5_i<-cacheSolve(m5)
m5_i<-cacheSolve(m5_c)
m5_i
m5%*%m5_i
str(iFileName)
x<-c(1,2,4,5)
str(x)
xx<-matrix(1:9,3,3)
xx
str(xx)
x<-1:100
x
summary(x)
x<-0:100
summary(x)
library(datasets)
s<-split(airquality, airquality$Month)
s
set.seed(1)
rnorm(5)
rnorm(5)
set.seed(6)
rnorm(5)
rnorm(5)
set.seed(1)
rnorm(5)
rnorm(5)
rnorm(5)
set.seed(6)
rnorm(5)
rnorm(5)
rnorm(5)
set.seed(1)
rnorm(5)
set.seed(20)
x<-rnorm(100)
e<-rnorm(100,0,2)
y<-0,5+2*x+e
set.seed(20)
x<-rnorm(100)
e<-rnorm(100,0,2)
y<-0.5+2*x+e
sumary(y)
summary(y)
plot(x,y)
plot(z,sin(z)/z)
z<-rnorm(100000)
plot(z,sin(z)/z)
z<-rnorm(100000,0,20)
plot(z,sin(z)/z)
z<-rnorm(100000,0,200)
plot(z,sin(z)/z)
z<-rnorm(100000,0,20)
plot(z,sin(z)/z)
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(pants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace=TRUE)
sample(1:6,4,replace=TRUE)
sample(1:20,10)
LETTERS
sample(LETTERS)
flips<-sample(c(0,1),100,prob=(0.3,0.7))
flips<-sample(c(0,1),100,replacement=TRUE,prob=(0.3,0.7))
flips<-sample(c(0,1), 100, replace=TRUE, prob=(0.3, 0.7))
flips<-sample(c(0,1), 100)
flips<-sample(c(0,1), 100, replace=TRUE)
flips<-sample(c(0,1), 100, replace=TRUE, prob=(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1,size=100,prob=0,7)
rbinom(1,size=100,prob=0.7)
flips2<-rbinom(1,size=100,prob=0,7)
flips2<-rbinom(1,size=100,prob=0.7)
flips2<-rbinom(100,size=1,prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,100,25)
?rpois
rpois(5,10)
replicate(100,rpois(5,10))
my_pois<-replicate(100,rpois(5,10))
my_pois
cm<-colMeans(my_pois)
cm
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(speed,dit)
plot(speed,dist)
plot(cars$speed,cars$dist)
plot(cars$dist, cars$speed)
?plot
plot(cars$dist, cars$speed, xlab=Speed)
plot(cars$dist, cars$speed)
plot(cars$dist, cars$speed, xlab="Speed")
plot(x=cars$dist, y=cars$speed, xlab="Speed")
plot(x=cars$speed, y=cars$dist, xlab="Speed")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, main="My Plot" ,xlab="Speed", ylab="Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot", sub="My Plot Subtitle")
plot(cars, sub="My Plot Subtitle")
?par
plot(cars, col=2)
plot(cars, xlim=c(10,15))
?points
plot(cars, pch=2)
data(mtcars)
play()
head(mtcars)
dim(mtcars)
str(mtcars)
nxt()
?boxplot
boxplot(mpg~cyl, data=mtcars)
hist(mtcars$mpg)
system.time(readlines("http://www.jhsph.edu"))
system.time(readLines("http://www.jhsph.edu"))
system.time(readLines("http://www.zorky.ru"))
system.time(readLines("http://www.yandex.ru"))
system.time(readLines("http://www.alfabank.ru.ru"))
system.time(readLines("http://www.alfabank.ru"))
summary.rprof()
summary.Rprof()
summary.Rprof()
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
?pois
x <- rep(0:1, each = 5)
?qpois
?dpois
?qpois
getwd
getwd()
setwd(assignment3-data\)
setwd(assignment3-data)
setwd(Assignment3-data)
?gl
?df
setwd(usr/dimak/r/Assignment3-data)
setwd(/usr/dimak/r/Assignment3-data)
setwd(dimak/r/Assignment3-data)
getwd()
setwd(/Users/Dimak/R/Assignment3-data)
setwd(Users/Dimak/R/Assignment3-data)
