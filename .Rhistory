answ <- rbind(answ,data.frame(i,nrow(data[complete.cases(data), ])))
}
answ
}
complete("specdata", c(2, 4, 8, 10, 12))
complete <- function(directory, id=1:332){
##Creating filenames(can be 001,010 and 100)
iFileName <- function(directory, id) {
if (id < 10) {
filename = paste(directory, "/","00", id, ".csv", sep="")
} else if (id >= 10 && id < 100) {
filename = paste(directory, "/", "0", id, ".csv", sep="")
} else {
filename = paste(directory, "/", id, ".csv", sep="")
}
}
answ <- data.frame(id=numeric(), nobs=numeric())
for (i in id) {
nameoffile <- iFileName(directory,i)
data <- read.csv(nameoffile)
answ <- rbind(answ,data.frame(id=i,nobs=nrow(data[complete.cases(data), ])))
}
answ
}
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25)
complete("specdata", 3)
?cor
corr <- function(directory, threshold = 0) {
source("complete.R")
measurments <- complete(directory, 1:332)
sulfate <- numeric()
nitrate <- numeric()
result <- numeric()
for (i in measurments$id[measurments$nobs > threshold]) {
filename <- iFileName(directory, i)
data <- read.csv(filename)
result <- c(result, cor(data$sulfate, data$nitrate, use="complete.obs"))
}
result
}
cr <- corr("specdata", 150)
cr <- corr("specdata", 150)
complete <- function(directory, id=1:332){
##Creating filenames(can be 001,010 and 100)
source("iFileName.R")
answ <- data.frame(id=numeric(), nobs=numeric())
for (i in id) {
nameoffile <- iFileName(directory,i)
data <- read.csv(nameoffile)
answ <- rbind(answ,data.frame(id=i,nobs=nrow(data[complete.cases(data), ])))
}
answ
}
complete("specdata", 3)
complete("specdata", 30:25)
corr <- function(directory, threshold = 0) {
source("complete.R")
source("iFileName.R")
measurments <- complete(directory, 1:332)
sulfate <- numeric()
nitrate <- numeric()
result <- numeric()
for (i in measurments$id[measurments$nobs > threshold]) {
filename <- iFileName(directory, i)
data <- read.csv(filename)
result <- c(result, cor(data$sulfate, data$nitrate, use="complete.obs"))
}
result
}
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 400)
head(cr)
cr <- corr("specdata", 5000)
summary(cr)
cr <- corr("specdata")
lenght(cr)
lenghts(cr)
length(cr)
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "sulfate", 34)
pollutantmean("specdata", "nitrate")
pollutantmean("specdata", "nitrate")
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc <- complete("specdata", 54)
print(cc$nobs)
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
b<-rnorm(10)
b
?rnorm
x<-list(a<-1:5, b<-rnorm(10)
lapply(x, mean)
x<-list(a<-1:5, b<-rnorm(10))
lapply(x, mean)
$a
x<-list(a=1:5, b=rnorm(10))
lapply(x, mean)
x<-list(a=1:4, b=rnorm(10), c=rnorm(20,1), d=rnorm(100,5))
lapply(x, mean)
x<-list(a=1:4, b=rnorm(10), c=rnorm(200,1), d=rnorm(100,5))
lapply(x, mean)
x<-list(a=1:4, b=rnorm(10), c=rnorm(200,1), d=rnorm(1000,5))
lapply(x, mean)
x<-list(a=1:4, b=rnorm(10), c=rnorm(2000,1), d=rnorm(1000,5))
lapply(x, mean)
x<-list(a=matrix(1:4,2,2),b=matrix(1:6,3,2))
x
lapply(x,function(elt) elt([,1]))
lapply(x,function(elt) elt[,1])
str(apply)
?str
x<-matrix(rnorm(200),20,10)
x
apply(x,2,mean)
apply(x,1,sum)
apply(x,1,quantile,probs=c(0.25, 0,75))
apply(x,1,quantile,probs=c(0.25, 0.75))
y<-matrix(rep(200),20,10)
y
y<-matrix(rep(100),20,10)
y
apply(y,1,quantile,probs=c(0.25, 0.75))
y<-matrix(1:200),20,10)
y<-matrix(1:200,20,10)
apply(y,1,quantile,probs=c(0.25, 0.75))
y
apply(y,2,quantile,probs=c(0.25, 0.75))
a <- array(rnorm(2 * 2 * 10), c(2, 2, 10))
apply(a, c(1, 2), mean)
a
rowMeans(a, dims = 2)
rowMeans(a, dims = 1)
rowMeans(a, dims = 3)
rowMeans(a, dims = 2)
?rowMeans
maply(1:4,4:1)
mapply(1:4,4:1)
mapply(rep,1:4,4:1)
x<-function(x,t){dkf}
dd
?runif
f<-gl(3,10)
f
?gl
runif(10)
ls
ls()
ls()
rm(list=ls())
?data.frame
?sapply
?interaction
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list<-lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags,class)
cls_vect<-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors<-flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals<-lapply(flags[,nrows],unique)
unique_vals<-lapply(flags[,nrows(flags)],unique)
unique_vals<-lapply(flags,unique)
unique_vals
length(unique_vals)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags,uniwue)
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
log(-1)
printmessage <-function(x){
if(x>0) print ("X is greater than zero")
else print("X is less or equal to zero")
invisible(x)
}
printmessage(12)
printmessage(-12)
?invisible
printmessage2 <-function(x){
if(x>0) print ("X is greater than zero")
else print("X is less or equal to zero")
}
printmessage2(-12)
mean(xzx)
traceback
traceback()
View(flag_colors)
debug(lm)
lm(y~x)
n
exit()
x<-2
library(datasets)
data("iris")
data(iris)
iris
sapply(iris$virginica, mean)
x1<-sapply(iris$virginica, mean)
x1
x1<-sapply(iris$virginica, mean)
?rowMeans
sapply(iris$Sepal.Length, mean)
tapply(Sepal.Length, Species, mean)["virginica"]
tapply(iris$Sepal.Length, iris$Species==virginica, mean)
s<-split(iris, iris$Species)
sapply(s,function(x) colMeans(x[, 2]))
sapply(s,function(x) colMeans(x[, c("Sepal.Length", "Sepal.Width")])
1
sapply(s,function(x) colMeans(x[, c("Sepal.Length", "Sepal.Width")]))
sapply(s,function(x) colMeans(x[, c("Sepal.Length")]))
mean(iris$Sepal.Length [iris$Species=="virginica"],na.rm=TRUE)
?tapply
tapply(iris$Sepal.Length,[iris$Species==virginica], mean)
colmeans(iris)
colMeans(iris)
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
library(datasets)
library(datasets)
data(mtcars)
?mtcars
mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(iris.$, mtcars$cyl, mean)
> tapply(iris$Sepal.Length,iris$Species, mean)
tapply(iris$Sepal.Length,iris$Species, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mean(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$hp, mtcars$cyl, mean)
an3<-82.63636 122.28571 209.21429
an3<-tapply(mtcars$hp, mtcars$cyl, mean)
an[3]-an[1]
an3[3]-an3[1]
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(1:15)
zz<-makeVector(1:15)
zz
class(zz)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(1:15)
cachemean(1:15,2:12,3:17)
zz<-1:15
cachemean(zz[3])
zz<-matrix(1:4,2,2)
zz
cachemean(zz)
cachemean(zz[,1])
zz<-makeVector(1:15)
zz
cachemean(zz)
cachemean(zz)
zzz<-makeVector(1:150)
cachemean(zzz)
cachemean(zzz)
y<-10
f <- function(x) { y<-2
y^2 + g(x)
}
g <- function(x) { x*y
}
f(3)
makeVector$get
makeVector$get()
makeVector(c(1,2,3,4,5))
makeVector$get()
a<-makeVector(c(1,2,3,4,5))
a$get()
makeVector()$get()
makeVector(c(1,2,3))$get()
a<-makeVector(c(1,2,3,4,5))
makeVector()$get()
a$get()
a$set(c(1,3,5,7))
a$get()
?solve
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inverseM <- NULL
set <- function(y) {
x <<- y
inverseM <<- NULL
}
get <- function() x
setInverseM <- function(NewInverseM) inverseM <<- NewInverseM
getInverseM <- function() inverseM
list(set = set, get = get,
setInverseM = setInverseM,
getInverseM = getInverseM)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverseM <- x$getInverseM()
if(!is.null(inverseM)) {
message("getting cached `inverse Matrix")
return(inverseM)
}
data <- x$getInverseM()
inverseM <- solve(data, ...)
x$setInverseM(inverseM)
inverseM
}
matr<-matrix(1:4,2,2)
matr
matr_c<-makeCacheMatrix(matr)
matr_c
matr_c$get()
cacheSolve(matr_c)
cacheSolve(matr_c)
solve(matr)
test1<-matr_c$getInverseM()
test1
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inverseM <- NULL
set <- function(y) {
x <<- y
inverseM <<- NULL
}
get <- function() x
setInverseM <- function(NewInverseM) inverseM <<- NewInverseM
getInverseM <- function() inverseM
list(set = set, get = get,
setInverseM = setInverseM,
getInverseM = getInverseM)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverseM <- x$getInverseM()
if(!is.null(inverseM)) {
message("getting cached `inverse Matrix")
return(inverseM)
}
data <- x$get()
inverseM <- solve(data, ...)
x$setInverseM(inverseM)
inverseM
}
matr<-matrix(1:4,2,2)
matr_c<-makeCacheMatrix(matr)
matr_c
matr_c$get()
cacheSolve(matr_c)
cacheSolve(matr_c)*matr_c$get()
cacheSolve(matr_c)%*%matr_c$get()
cacheSolve(matr_c)
cacheSolve(matr_c*2)
cacheSolve(matr_c%*%2)
matr2<-matrix(c(2,15,34,32,21,17),3,3)
matr2
makeCacheMatrix(matr2)
cacheSolve(matr2)
matr2_c<-makeCacheMatrix(matr2)
cacheSolve(matr2_c)
matr2<-matrix(c(3,15,34,32,21,17),3,3)
matr2_c<-makeCacheMatrix(matr2)
cacheSolve(matr2_c)
matr2<-matrix(c(3,15,34,12,24,17),3,3)
matr2_c<-makeCacheMatrix(matr2)
matr2_c$getInverseM
matr2_c$getInverseM()
cacheSolve(matr2_c)
matr2<-matrix(c(30,5,3,12,24,7),3,3)
cacheSolve(matr2_c)
matr2<-matrix(c(1,1,1,1,1,1),3,3)
matr2
matr2_c<-makeCacheMatrix(matr2)
cacheSolve(matr2_c)
matr2<-matrix(c(1,1,1,1,1,1,8,0,9),3,3)
matr2_c<-makeCacheMatrix(matr2)
cacheSolve(matr2_c)
matr3<-matrix(c(1,1,1,1,1,1,8,0,9,2,3,4,43,2,6,8),4,4)
matr3
matr3_c<-makeCacheMatrix(matr3)
cacheSolve(matr3_c)
matr3_inv<-cacheSolve(matr3_c)
matr3_inv%*%matr3
m4<-matrix(c(1,9,12,65),2,2)
m
m4
m4_c<-makeCacheMatrix(m4)
m4_c
m4_i<-cacheSolve(m4_c)
m4_i
m4%*%m4_i
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inverseM <- NULL
set <- function(y) {
x <<- y
inverseM <<- NULL
}
get <- function() x
setInverseM <- function(NewInverseM) inverseM <<- NewInverseM
getInverseM <- function() inverseM
list(set = set, get = get,
setInverseM = setInverseM,
getInverseM = getInverseM)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverseM <- x$getInverseM()
if(!is.null(inverseM)) {
message("getting cached `inverse Matrix")
return(inverseM)
}
data <- x$get()
inverseM <- solve(data, ...)
x$setInverseM(inverseM)
inverseM
}
m4<-matrix(c(1,9,12,65),2,2)
m4_c<-makeCacheMatrix(m4)
m4_i<-cacheSolve(m4_c)
m4%*%m4_i
length(dim(m4$get())
2
length(dim(m4$get()))
dim(m4)
lenght(dim(m4))
length(dim(m4))
m5<-matrix(c(1,9,12,65,3,5,4,3,2),3,3)
m5_c<-makeCacheMatrix(m5)
m5_c
m5_i<-cacheSolve(m5)
m5_i<-cacheSolve(m5_c)
m5_i
m5%*%m5_i
